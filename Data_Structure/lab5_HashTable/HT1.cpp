#include<iostream>
#include<stdlib.h>
using namespace std;

class HashTable{
private:
    int *elem;              //???????????
    int count;              //?????????????
    int size;               //??????????
    int *success;           //??????????
    int *unsuccess;         //?????????

public:
    void initHash();        //??????????

    int Hashing(int key);   //???????

    void PrintHash();       //??????

    float SuccessASL();      //??????????????????

    float UnsuccessASL();    //??????????????????
};

void HashTable::initHash(){
    cout<<"???????????????";
    cin>>count;
    cout<<"?????????й?????";
    //???nums????????洢???е?????
    int nums[count];
    for(int i=0;i<count;i++){
        cin>>nums[i];
    }
    cout<<"????????????????";
    cin>>size;

    //?????????
    //????????????????/?????????????
    elem = (int *)malloc(size*sizeof(int));
    success = (int *)malloc(size*sizeof(int));
    unsuccess = (int *)malloc(size*sizeof(int));
    for(int t=0;t<size;t++){
        //???????????????-1???????
        elem[t] = -1;           
        success[t] = 0;
        unsuccess[t] = 1;
    }
    for(int j=0;j<count;j++){
        int key = Hashing(nums[j]);
        int d = 0;
        //???????????з????????
        while(elem[(key+d)%size] != -1){
            d++;
        }
        elem[(key+d)%size] = nums[j];
        success[(key+d)%size] = d+1;   //???????????d+1
    }
    //?????????????????
    //?????????????????????????????λ?ò????
    //???????????????????????????????????????
    //??????????????????????λ???????
    for(int i=0;i<size;i++){
        int un = 0;
        while(elem[(un+i)%size]!=-1 && un<=size){
            un++;
        }
        unsuccess[i] = un+1;
    }
}

int HashTable::Hashing(int key){
    //????????????????????????
    return key%size;
}

float HashTable::SuccessASL(){
    float sum = 0;
    for(int i=0;i<size;i++){
        sum+=success[i];
    }
    return sum/count;
}

float HashTable::UnsuccessASL(){
    float sum = 0;
    int n = 0;
    for(int i=0;i<size;i++){
        sum+=unsuccess[i];
    }
    return sum/size;
}

void HashTable::PrintHash(){
    cout<<"???????????\t";
    for(int i=0;i<size;i++){
        cout<<i<<"\t";
    }
    cout<<endl;
    cout<<"???е??????\t";
    for(int i=0;i<size;i++){
        if(elem[i]==-1){
            cout<<"-"<<"\t";
        }
        else{
            cout<<elem[i]<<"\t";
        }
    }
    cout<<endl;
    cout<<"????????????\t";
    for(int i=0;i<size;i++){
        cout<<success[i]<<"\t";
    }
    cout<<endl;
    cout<<"???????????\t";
    for(int i=0;i<size;i++){
        cout<<unsuccess[i]<<"\t";
    }
    cout<<endl;
    cout<<"???????????????????\t"<<SuccessASL()<<endl;
    cout<<"???????????????????\t"<<UnsuccessASL()<<endl;
}

int main(){
    while(1){
        HashTable HT1;
        HT1.initHash();
        HT1.PrintHash();
        system("pause");
    }
}